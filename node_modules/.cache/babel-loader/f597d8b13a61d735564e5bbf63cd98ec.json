{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Ordering Food Project\\\\Orering-Food-Project\\\\src\\\\hooks\\\\useValdtion.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formActions } from \"../store/form-slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useValdtion = type => {\n  _s();\n\n  const dispatch = useDispatch();\n  const myInputs = useSelector(state => state.form);\n\n  if (type === \"Your Name\") {\n    const changeNameHandler = e => {\n      dispatch(formActions.changeInput({\n        value: e.target.value,\n        input: \"name\"\n      }));\n    };\n\n    const blurNameHandler = () => {\n      dispatch(formActions.changeInputtoutch({\n        value: true,\n        input: \"nameToutch\"\n      }));\n    };\n\n    const valdtionMessge = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"name must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 28\n    }, this);\n\n    return [changeNameHandler, blurNameHandler, myInputs.name, myInputs.nameToutch, valdtionMessge];\n  }\n\n  if (type === \"Street\") {\n    const changeStreetHandler = e => {\n      dispatch(formActions.changeInput({\n        value: e.target.value,\n        input: \"street\"\n      }));\n    };\n\n    const blurStreetHandler = () => {\n      dispatch(formActions.changeInputtoutch({\n        value: true,\n        input: \"streetToutch\"\n      }));\n    };\n\n    const valdtionMessge = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"street must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 28\n    }, this);\n\n    return [changeStreetHandler, blurStreetHandler, myInputs.street, myInputs.streetToutch, valdtionMessge];\n  }\n\n  if (type === \"Postal Code\") {\n    const changePostalHandler = e => {\n      dispatch(formActions.changeInput({\n        value: e.target.value,\n        input: \"postal\"\n      }));\n    };\n\n    const blurPostalHandler = () => {\n      dispatch(formActions.changeInputtoutch({\n        value: true,\n        input: \"postalToutch\"\n      }));\n    };\n\n    let valdtionMessge;\n\n    if (myInputs.postal.trim() === \"\") {\n      valdtionMessge = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"postal must not be empity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 24\n      }, this);\n    } else if (isNaN(+myInputs.postal)) {\n      valdtionMessge = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"postal must be a number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 24\n      }, this);\n    } else {\n      valdtionMessge = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"postal must be 4 chracter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 24\n      }, this);\n    }\n\n    return [changePostalHandler, blurPostalHandler, myInputs.postal, myInputs.postalToutch, valdtionMessge];\n  }\n\n  if (type === \"City\") {\n    const changeCityHandler = e => {\n      dispatch(formActions.changeInput({\n        value: e.target.value,\n        input: \"city\"\n      }));\n    };\n\n    const blurCityHandler = () => {\n      dispatch(formActions.changeInputtoutch({\n        value: true,\n        input: \"cityToutch\"\n      }));\n    };\n\n    const valdtionMessge = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"city must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 28\n    }, this);\n\n    return [changeCityHandler, blurCityHandler, myInputs.city, myInputs.cityToutch, valdtionMessge];\n  }\n};\n\n_s(useValdtion, \"x2qtkLQY5OpvHgVWUz2JolNFTP0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport default useValdtion;","map":{"version":3,"sources":["C:/Users/user/Desktop/Ordering Food Project/Orering-Food-Project/src/hooks/useValdtion.js"],"names":["useDispatch","useSelector","formActions","useValdtion","type","dispatch","myInputs","state","form","changeNameHandler","e","changeInput","value","target","input","blurNameHandler","changeInputtoutch","valdtionMessge","name","nameToutch","changeStreetHandler","blurStreetHandler","street","streetToutch","changePostalHandler","blurPostalHandler","postal","trim","isNaN","postalToutch","changeCityHandler","blurCityHandler","city","cityToutch"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { formActions } from \"../store/form-slice\";\r\nconst useValdtion = (type) => {\r\n  const dispatch = useDispatch();\r\n  const myInputs = useSelector((state) => state.form);\r\n\r\n  if (type === \"Your Name\") {\r\n    const changeNameHandler = (e) => {\r\n      dispatch(\r\n        formActions.changeInput({ value: e.target.value, input: \"name\" })\r\n      );\r\n    };\r\n    const blurNameHandler = () => {\r\n      dispatch(\r\n        formActions.changeInputtoutch({ value: true, input: \"nameToutch\" })\r\n      );\r\n    };\r\n\r\n    const valdtionMessge = <p>name must not be empty</p>;\r\n    return [\r\n      changeNameHandler,\r\n      blurNameHandler,\r\n      myInputs.name,\r\n      myInputs.nameToutch,\r\n      valdtionMessge,\r\n    ];\r\n  }\r\n\r\n  if (type === \"Street\") {\r\n    const changeStreetHandler = (e) => {\r\n      dispatch(\r\n        formActions.changeInput({ value: e.target.value, input: \"street\" })\r\n      );\r\n    };\r\n    const blurStreetHandler = () => {\r\n      dispatch(\r\n        formActions.changeInputtoutch({ value: true, input: \"streetToutch\" })\r\n      );\r\n    };\r\n    const valdtionMessge = <p>street must not be empty</p>;\r\n    return [\r\n      changeStreetHandler,\r\n      blurStreetHandler,\r\n      myInputs.street,\r\n      myInputs.streetToutch,\r\n      valdtionMessge,\r\n    ];\r\n  }\r\n  if (type === \"Postal Code\") {\r\n    const changePostalHandler = (e) => {\r\n      dispatch(\r\n        formActions.changeInput({ value: e.target.value, input: \"postal\" })\r\n      );\r\n    };\r\n    const blurPostalHandler = () => {\r\n      dispatch(\r\n        formActions.changeInputtoutch({ value: true, input: \"postalToutch\" })\r\n      );\r\n    };\r\n    let valdtionMessge;\r\n    if (myInputs.postal.trim() === \"\") {\r\n      valdtionMessge = <p>postal must not be empity</p>;\r\n    } else if (isNaN(+myInputs.postal)) {\r\n      valdtionMessge = <p>postal must be a number</p>;\r\n    } else {\r\n      valdtionMessge = <p>postal must be 4 chracter</p>;\r\n    }\r\n    return [\r\n      changePostalHandler,\r\n      blurPostalHandler,\r\n      myInputs.postal,\r\n      myInputs.postalToutch,\r\n      valdtionMessge,\r\n    ];\r\n  }\r\n  if (type === \"City\") {\r\n    const changeCityHandler = (e) => {\r\n      dispatch(\r\n        formActions.changeInput({ value: e.target.value, input: \"city\" })\r\n      );\r\n    };\r\n    const blurCityHandler = () => {\r\n      dispatch(\r\n        formActions.changeInputtoutch({ value: true, input: \"cityToutch\" })\r\n      );\r\n    };\r\n    const valdtionMessge = <p>city must not be empty</p>;\r\n    return [\r\n      changeCityHandler,\r\n      blurCityHandler,\r\n      myInputs.city,\r\n      myInputs.cityToutch,\r\n      valdtionMessge,\r\n    ];\r\n  }\r\n};\r\n\r\nexport default useValdtion;\r\n"]},"metadata":{},"sourceType":"module"}