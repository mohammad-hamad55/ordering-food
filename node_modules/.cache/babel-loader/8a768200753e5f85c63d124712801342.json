{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Ordering Food Project\\\\Orering-Food-Project\\\\src\\\\componints\\\\UI\\\\Backdrop.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport MyContext from \"../../store/myContext\";\nimport styles from \"./Backdrop.module.css\";\nimport InnerItem from \"../cart/InnerItem\";\nimport OrderingForm from \"../cart/OrderingForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Backdrop = props => {\n  _s();\n\n  const context = useContext(MyContext);\n  const [orderingMode, setOrdering] = useState(false);\n  const [isSubmiting, setSubmiting] = useState(false);\n  const [submited, setSubmited] = useState(false);\n\n  const submitingHandler = activity => {\n    setSubmiting(activity);\n  };\n\n  const submitedHandler = activity => {\n    setSubmited(activity);\n  };\n\n  const closeClickHandler = e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    context.backdropApper(false);\n    submitedHandler(false);\n  };\n\n  const orderHandler = () => {\n    setOrdering(true);\n  };\n\n  const myTotal = context.myShopingList.reduce((toatal, el) => {\n    return toatal + +el.price * +el.miniCounter;\n  }, 0);\n  const backdropStyle = context.apperBack ? styles.backdroppls : styles.backdrop;\n  let myMainContent;\n\n  if (!submited) {\n    myMainContent = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.overlay,\n      children: [context.myShopingList.map(el => {\n        return /*#__PURE__*/_jsxDEV(InnerItem, {\n          name: el.name,\n          id: el.id,\n          price: el.price,\n          miniCounter: el.miniCounter\n        }, el.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.controls,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"total amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"$\", myTotal]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: orderingMode ? styles.form : styles.buttons,\n          children: orderingMode ? /*#__PURE__*/_jsxDEV(OrderingForm, {\n            submitedHandler: submitedHandler,\n            submitingHandler: submitingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: closeClickHandler,\n              children: \"close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: orderHandler,\n              children: \"order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  } else {\n    myMainContent = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.sucsess,\n      children: \"the order has been sent sucsessfuly\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n  const lodingDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.sucsess,\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 21\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: backdropStyle,\n    onClick: closeClickHandler,\n    children: isSubmiting ? lodingDiv : myMainContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Backdrop, \"TD7CEGthvtJF/QE5/B1x7VGl/x8=\");\n\n_c = Backdrop;\nexport default Backdrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"Backdrop\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Ordering Food Project/Orering-Food-Project/src/componints/UI/Backdrop.js"],"names":["React","useContext","useState","MyContext","styles","InnerItem","OrderingForm","Backdrop","props","context","orderingMode","setOrdering","isSubmiting","setSubmiting","submited","setSubmited","submitingHandler","activity","submitedHandler","closeClickHandler","e","target","currentTarget","backdropApper","orderHandler","myTotal","myShopingList","reduce","toatal","el","price","miniCounter","backdropStyle","apperBack","backdroppls","backdrop","myMainContent","overlay","map","name","id","controls","form","buttons","sucsess","lodingDiv"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport MyContext from \"../../store/myContext\";\r\nimport styles from \"./Backdrop.module.css\";\r\nimport InnerItem from \"../cart/InnerItem\";\r\nimport OrderingForm from \"../cart/OrderingForm\";\r\nconst Backdrop = (props) => {\r\n  const context = useContext(MyContext);\r\n  const [orderingMode, setOrdering] = useState(false);\r\n  const [isSubmiting, setSubmiting] = useState(false);\r\n  const [submited, setSubmited] = useState(false);\r\n  const submitingHandler = (activity) => {\r\n    setSubmiting(activity);\r\n  };\r\n  const submitedHandler = (activity) => {\r\n    setSubmited(activity);\r\n  };\r\n  const closeClickHandler = (e) => {\r\n    if (e.target !== e.currentTarget) {\r\n      return;\r\n    }\r\n    context.backdropApper(false);\r\n    submitedHandler(false);\r\n  };\r\n  const orderHandler = () => {\r\n    setOrdering(true);\r\n  };\r\n  const myTotal = context.myShopingList.reduce((toatal, el) => {\r\n    return toatal + +el.price * +el.miniCounter;\r\n  }, 0);\r\n\r\n  const backdropStyle = context.apperBack\r\n    ? styles.backdroppls\r\n    : styles.backdrop;\r\n  let myMainContent;\r\n\r\n  if (!submited) {\r\n    myMainContent = (\r\n      <div className={styles.overlay}>\r\n        {context.myShopingList.map((el) => {\r\n          return (\r\n            <InnerItem\r\n              name={el.name}\r\n              key={el.id}\r\n              id={el.id}\r\n              price={el.price}\r\n              miniCounter={el.miniCounter}\r\n            ></InnerItem>\r\n          );\r\n        })}\r\n        <div className={styles.controls}>\r\n          <h3>total amount</h3>\r\n          <span>${myTotal}</span>\r\n          <div className={orderingMode ? styles.form : styles.buttons}>\r\n            {orderingMode ? (\r\n              <OrderingForm\r\n                submitedHandler={submitedHandler}\r\n                submitingHandler={submitingHandler}\r\n              ></OrderingForm>\r\n            ) : (\r\n              <React.Fragment>\r\n                <button onClick={closeClickHandler}>close</button>\r\n                <button onClick={orderHandler}>order</button>\r\n              </React.Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    myMainContent = (\r\n      <div className={styles.sucsess}>the order has been sent sucsessfuly</div>\r\n    );\r\n  }\r\n  const lodingDiv = <div className={styles.sucsess}>loading...</div>;\r\n  return (\r\n    <div className={backdropStyle} onClick={closeClickHandler}>\r\n      {isSubmiting ? lodingDiv : myMainContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n"]},"metadata":{},"sourceType":"module"}